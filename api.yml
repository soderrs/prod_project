openapi: "3.0.1"
info:
  title: Promo Code API
  version: "1.0"
servers:
  - url: https://api.changeme.please/

paths:
  /ping:
    get:
      description: Проверка того, что ваше приложение работает и готово принимать входящие запросы. Тело ответа может быть произвольным (на ваше усмотрение); главное - вернуть Status Code 200.
      tags:
        - default
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    maxLength: 30
                    minLength: 1
              example:
                status: "PROOOOOOOOOOOOOOOOOD"
  # B2B API
  /business/auth/sign-up:
    post:
      tags:
        - B2B
      summary: Регистрация новой компании
      description: |
        Регистрирует новую компанию и возвращает токен доступа.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/CompanyNameCreate"
                email:
                  $ref: "#/components/schemas/Email"
                password:
                  $ref: "#/components/schemas/Password"
              required:
                - name
                - email
                - password
      responses:
        "200":
          description: Компания успешно зарегистрирована.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    maxLength: 300
                    description: Токен доступа для дальнейших запросов.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlByb2QgUHJvZG92aWNoIiwiaWF0IjoxNTE2MjM5MDIyfQ.zqNHgTZOlgb0n5KDT2kPET4dOKnkrxJP5Kz6LhIGRiY"
                  company_id:
                    $ref: "#/components/schemas/CompanyId"
        "400":
          $ref: "#/components/responses/Response400"
        "409":
          $ref: "#/components/responses/EmailAlreadyRegistred"

  /business/auth/sign-in:
    post:
      tags:
        - B2B
      summary: Аутентификация компании
      description: |
        Вход компании по email и паролю для получения токена доступа. Успешная аутентификация инвалидирует ранее выданные токены (запросы по ним станут невозможны).
      requestBody:
        $ref: "#/components/requestBodies/SignIn"
      responses:
        "200":
          $ref: "#/components/responses/SignIn200"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/SignIn401"

  /business/promo:
    post:
      tags:
        - B2B
      summary: Создание нового промокода
      description: |
        Создает новый промокод для компании с настройкой таргетинга и типа промокодов.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromoCreate"
      responses:
        "201":
          description: Промокод успешно создан.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Уникальный идентификатор созданного промокода.
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"

    get:
      tags:
        - B2B
      summary: Получить список промокодов
      description: |
        Возвращает список промокодов компании с возможностью фильтрации, сортировки и пагинации.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/LimitQueryParam"
        - $ref: "#/components/parameters/OffsetQueryParam"
        - name: sort_by
          in: query
          schema:
            type: string
            description: Сортировать по дате начала/конца действия промокода. По умолчанию - сортируется в порядке создания промокодов. Сортировка всегда выполняется по убыванию. Если у промокода не задано active_from - принимайте за -inf, если не задано active_until - принимайте за +inf.
            enum:
              - active_from
              - active_until
        - name: country
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Country"
            description:
              Список стран целевой аудитории в формате ISO 3166-1 alpha-2, по которому нужно фильтровать промокоды. В ответе должны содержаться промокоды либо без указанного региона, либо с регионом, который присутствует среди указанного списка при фильтрации.
              Если параметр не указан, подходят промокоды с произвольными регионом.
            example: ["ru", "fr"]
      responses:
        "200":
          description:
            Список промокодов компании с учетом параметров фильтрации.
            Для лучшего понимания правил фильтрации ознакомьтесь со спецификацией.
            
            Набор значений (`promo_common` или `promo_unique`) должен равняться начальному набору значений, который компания передала при создании промокода.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PromoReadOnly"
          headers:
            X-Total-Count:
              $ref: "#/components/headers/XTotalCount"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"

  /business/promo/{id}:
    get:
      tags:
        - B2B
      summary: Получение промокода
      description: |
        Получает данные промокода по его ID. С помощью этого эндпоинта компания может получить только свои промокоды.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromoReadOnly"
          description: Промокод успешно получен.
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "403":
          $ref: "#/components/responses/NoAccessToPromo"
        "404":
          $ref: "#/components/responses/PromoNotFound"

    patch:
      tags:
        - B2B
      summary: Редактирование промокода
      description: |
        Редактирует данные промокода по его ID.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromoPatch"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromoReadOnly"
          description: Промокод успешно обновлен.
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "403":
          $ref: "#/components/responses/NoAccessToPromo"
        "404":
          $ref: "#/components/responses/PromoNotFound"

  /business/promo/{id}/stat:
    get:
      tags:
        - B2B
      summary: Получить статистику по промокоду
      description: |
        Возвращает статистику использования промокода по его ID. Учитываются только те страны, откуда были активации.

        Массив со сводкой по странам должен быть отсортирован по коду региона, в лексикографическом порядке (от a к z). 
        Сравнивайте коды стран регистронезависимо. Например, приведите их к нижнему регистру.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Статистика по промокоду.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromoStat"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "403":
          $ref: "#/components/responses/NoAccessToPromo"
        "404":
          $ref: "#/components/responses/PromoNotFound"

  # B2C API
  /user/auth/sign-up:
    post:
      tags:
        - B2C
      summary: Регистрация нового пользователя
      description: |
        Регистрирует нового пользователя и возвращает токен доступа.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "200":
          description: Пользователь успешно зарегистрирован.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlByb2QgUHJvZG92aWNoIiwiaWF0IjoxNTE2MjM5MDIyfQ.zqNHgTZOlgb0n5KDT2kPET4dOKnkrxJP5Kz6LhIGRiY"
        "400":
          $ref: "#/components/responses/Response400"
        "409":
          $ref: "#/components/responses/EmailAlreadyRegistred"

  /user/auth/sign-in:
    post:
      tags:
        - B2C
      summary: Аутентификация пользователя
      description: |
        Вход пользователя по email и паролю для получения токена доступа. Успешная аутентификация инвалидирует ранее выданные токены (запросы по ним станут невозможны).
      requestBody:
        $ref: "#/components/requestBodies/SignIn"
      responses:
        "200":
          $ref: "#/components/responses/SignIn200"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/SignIn401"

  /user/profile:
    get:
      tags:
        - B2C
      summary: Получение профиля пользователя
      description: |
        Возвращает данные профиля текущего пользователя.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      responses:
        "200":
          description: Данные профиля пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/NoAuth401"

    patch:
      tags:
        - B2C
      summary: Изменение настроек пользователя
      description: |
        Обновляет настройки текущего пользователя. Если указан новый пароль, следующие попытки аутентификации должны учитывать обновленное значение. Смена пароля не инвалидирует токен.
        
        Если значение поля не было передано (или передан null), не обновляйте данное поле.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatch"
      responses:
        "200":
          description: Профиль обновлен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"

  /user/feed:
    get:
      tags:
        - B2C
      summary: Получение ленты промокодов
      description: |
        Возвращает ленту промокодов с поддержкой пагинации, фильтрации и сортировки. Возвращаются промокоды, которые соответствуют настройкам таргетинга.
        Промокоды отсортированы по убыванию даты создания.

      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/LimitQueryParam"
        - $ref: "#/components/parameters/OffsetQueryParam"
        - name: category
          in: query
          schema:
            type: string
            example: коты
          description: Будут возвращены промокоды с указанной категорией.
        - name: active
          in: query
          schema:
            type: boolean
            example: true
          description: Если поле указано, будут возвращены промокоды с соответствующим значением поля `active`. Если параметр отсутствует, фильтрация по статусу активности не применяется.
      responses:
        "200":
          description: Лента промокодов.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PromoForUser"
          headers:
            X-Total-Count:
              $ref: "#/components/headers/XTotalCount"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"

  /user/promo/{id}:
    get:
      tags:
        - B2C
      summary: Просмотр промокода по id
      description: |
        Возвращает промокод с этим id
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: История промокодов.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromoForUser"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "404":
          $ref: "#/components/responses/PromoNotFound"

  /user/promo/{id}/like:
    post:
      tags:
        - B2C
      summary: Добавить лайк к промокоду
      description: |
        Добавляет лайк к указанному промокоду. Повторный лайк не изменяет состояния, возвращается успешный ответ.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Лайк успешно добавлен.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "404":
          $ref: "#/components/responses/PromoNotFound"

    delete:
      tags:
        - B2C
      summary: Удалить лайк с промокода
      description: |
        Удаляет лайк с указанного промокода. Если лайк не стоит, возвращается успешный ответ.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Лайк успешно удален.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "404":
          $ref: "#/components/responses/PromoNotFound"

  /user/promo/{id}/comments:
    post:
      tags:
        - B2C
      summary: Добавить комментарий к промокоду
      description: |
        Добавляет комментарий к указанному промокоду. Пользователь может оставить несколько комментариев к одному и тому же промокоду.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  $ref: "#/components/schemas/CommentText"
              required:
                - text
      responses:
        "201":
          description: Комментарий успешно добавлен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "404":
          $ref: "#/components/responses/PromoNotFound"

    get:
      tags:
        - B2C
      summary: Получить комментарии к промокоду
      description: |
        Возвращает список комментариев к указанному промокоду. Комментарии отсортированы по убыванию даты публикации.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/LimitQueryParam"
        - $ref: "#/components/parameters/OffsetQueryParam"
        - $ref: "#/components/parameters/Id"

      responses:
        "200":
          description: Список комментариев.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
          headers:
            X-Total-Count:
              $ref: "#/components/headers/XTotalCount"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "404":
          $ref: "#/components/responses/PromoNotFound"

  /user/promo/{id}/comments/{comment_id}:
    get:
      tags:
        - B2C
      summary: Получить комментарий к промокоду
      description: |
        Возвращает комментарий с данным ID.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/CommentId"
      responses:
        "200":
          description: Комментарий.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "404":
          $ref: "#/components/responses/PromoOrCommentNotFound"

    put:
      tags:
        - B2C
      summary: Редактировать текст комментария
      description: |
        Редактировать текст комментария с данным айди.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/CommentId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  $ref: "#/components/schemas/CommentText"
              required:
                - text
      responses:
        "200":
          description: Комментарий.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "403":
          $ref: "#/components/responses/NoAccessToComment"
        "404":
          $ref: "#/components/responses/PromoOrCommentNotFound"

    delete:
      tags:
        - B2C
      summary: Удалить комментарий
      description: |
        Удалить комментарий с данным ID.
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/CommentId"
      responses:
        "200":
          description: Комментарий успешно удален.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "403":
          $ref: "#/components/responses/NoAccessToComment"
        "404":
          $ref: "#/components/responses/PromoOrCommentNotFound"

  /user/promo/{id}/activate:
    post:
      tags:
        - B2C
      summary: Активация промокода
      description: |
        Активация промокода по его ID.
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/AuthorizationHeader"
      responses:
        "200":
          description: Промокод успешно активирован.
          content:
            application/json:
              schema:
                type: object
                properties:
                  promo:
                    type: string
                    example: "sale-GOOOL-50"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"
        "403":
          description: Вы не можете использовать этот промокод
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Вы не можете использовать этот промокод."
                    description: Возвращается в случае, если антифрод сервис не разрешил данному пользователю получить новый промокод.
        "404":
          $ref: "#/components/responses/PromoNotFound"

  /user/promo/history:
    get:
      tags:
        - B2C
      summary: История использования промокодов
      description: |
        Возвращает историю использования промокодов ЭТИМ ПОЛЬЗОВАТЕЛЕМ с поддержкой пагинации. Промокоды отсортированы по убыванию даты активации. 
      parameters:
        - $ref: "#/components/parameters/AuthorizationHeader"
        - $ref: "#/components/parameters/LimitQueryParam"
        - $ref: "#/components/parameters/OffsetQueryParam"
      responses:
        "200":
          description: История промокодов. Непосредственно значение промокода в рамках ответа не возвращается. Так как пользователь может активировать один и тот же промокод несколько раз, промокоды в рамках ответа могут повторяться.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PromoForUser"
          headers:
            X-Total-Count:
              $ref: "#/components/headers/XTotalCount"
        "400":
          $ref: "#/components/responses/Response400"
        "401":
          $ref: "#/components/responses/NoAuth401"

components:
  requestBodies:
    SignIn:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignIn"
  parameters:
    Id:
      name: id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/PromoId"

    CommentId:
      name: comment_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/CommentId"

    AuthorizationHeader:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        minLength: 5
        maxLength: 300
      description: Токен доступа - "Bearer {token}".
      example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlByb2QgUHJvZG92aWNoIiwiaWF0IjoxNTE2MjM5MDIyfQ.zqNHgTZOlgb0n5KDT2kPET4dOKnkrxJP5Kz6LhIGRiY"
    LimitQueryParam:
      name: limit
      in: query
      schema:
        type: integer
        description: Максимальное количество записей
        minimum: 0
        default: 10
    OffsetQueryParam:
      name: offset
      in: query
      schema:
        type: integer
        description: Сдвинуть начало на
        minimum: 0
        default: 0
  schemas:
    PromoId:
      type: string
      format: uuid
      description: Уникальный ID промокода, выдаётся сервером
      example: d8f9a687-4ff9-4976-a05c-f1bf1e5e2eec

    CommentId:
      type: string
      format: uuid
      example: d727c957-f7c0-4bff-a1ca-b18bd22db9ef

    SignIn:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/Email"
        password:
          $ref: "#/components/schemas/Password"
      required:
        - email
        - password
    Email:
      type: string
      format: email
      minLength: 8
      maxLength: 120
      example: "cu_fan@edu.hse.ru"

    Password:
      type: string
      description: Пароль пользователя/компании. Должен содержать латинские буквы, хотя бы одну заглавную, одну строчную, одну цифру и специальные символы.
      pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$"
      minLength: 8
      maxLength: 60
      example: HardPa$$w0rd!iamthewinner

    Country:
      type: string
      format: iso-3166-alpha-2
      description: Страна пользователя в формате ISO 3166-1 alpha-2, регистр может быть разным. Страна с данным кодом должна обязательно существовать.
      example: ru
    Target:
      type: object
      description: "Целевая аудитория"
      properties:
        age_from:
          type: integer
          description: Минимальный возраст целевой аудитории (включительно). Не должен превышать age_until.
          minimum: 0
          maximum: 100
          example: 14

        age_until:
          type: integer
          description: Максимальный возраст целевой аудитории (включительно).
          minimum: 0
          maximum: 100
          example: 20

        country:
          $ref: "#/components/schemas/Country"
        categories:
          type: array
          maxLength: 20
          items:
            type: string
            minLength: 2
            maxLength: 20
          description: Категории для таргетинга.
          example: [ios, коты, футбол, учитель]

    PromoDescription:
      description: Описание промокода
      type: string
      maxLength: 300
      minLength: 10
      example: Повышенный кэшбек 10% для новых клиентов банка!

    PromoImageURL:
      description: Ссылка на фото промокода
      type: string
      format: url
      maxLength: 350
      example: https://cdn2.thecatapi.com/images/3lo.jpg

    PromoPatch:
      type: object
      description: "Поля для редактирования промокода"
      properties:
        description:
          $ref: "#/components/schemas/PromoDescription"

        image_url:
          $ref: "#/components/schemas/PromoImageURL"

        target:
          $ref: "#/components/schemas/Target" # Ссылка на схему Target

        max_count:
          oneOf:
            - type: integer
              minimum: 0
              maximum: 100000000
              description: Максимально количество использований, если mode = COMMON. Его можно редактировать, но если текущее количество активироваций превышает переданное значение, вернется ошибка. Если число активаций становится равным max_count, сервер переводит промокод в неактивное состояние (`active` = false). Если увеличить max_count для неактивного прокомода, он перейдёт в статус активного.
            - type: integer
              minimum: 1
              maximum: 1
              description: При mode = UNIQUE данное поле должно всегда принимать значение 1.

        active_from:
          type: string
          format: date
          description: Дата начала действия промокода (включительно). Влияет на параметр active.

        active_until:
          type: string
          format: date
          description: Дата окончания действия промокода (включительно). Влияет на параметр active.

    PromoCreate:
      properties:
        mode:
          type: string
          enum:
            - COMMON
            - UNIQUE
          description: Режим промокода. COMMON - один общий промокод, UNIQUE - список промокодов.

        promo_common:
          type: string
          minLength: 5
          maxLength: 30
          description: Промокод для использования. Обязательный параметр, если mode = COMMON (иначе должен отсутствовать).
          example: sale-10

        promo_unique:
          type: array
          minLength: 1
          maxLength: 5000
          items:
            type: string
            minLength: 3
            maxLength: 30
          description: Список промокодов. Обязательный параметр, если mode = UNIQUE (иначе должен отсутствовать). Каждое значение может быть выдано пользователю только один раз.
          example:
            [
              winter-sale-30-abc28f99qa,
              winter-sale-30-299faab2c,
              sale-100-winner,
            ]

      allOf:
        - $ref: "#/components/schemas/PromoPatch"
      required:
        - description
        - mode
        - max_count
        - target

    PromoForUser:
      type: object
      description: "Поля промокода при получении пользователем"
      properties:
        promo_id:
          $ref: "#/components/schemas/PromoId"

        company_id:
          $ref: "#/components/schemas/CompanyId"

        company_name:
          $ref: "#/components/schemas/CompanyName"

        description:
          $ref: "#/components/schemas/PromoDescription"

        image_url:
          $ref: "#/components/schemas/PromoImageURL"

        active:
          $ref: "#/components/schemas/PromoIsActive"

        is_activated_by_user:
          type: boolean
          description: Активировал ли когда-то пользователь этот промокод
          example: false

        like_count:
          type: integer
          minimum: 0
          description: Количество лайков у промокода

        is_liked_by_user:
          type: boolean
          description: Поставил ли пользователь лайк этому промокоду
          example: false

        comment_count:
          type: integer
          minimum: 0
          description: Количество комментариев у промокода
          example: 5

      required:
        - promo_id
        - company_id
        - company_name
        - description
        - active
        - is_activated_by_user
        - like_count
        - is_liked_by_user
        - comment_count

    PromoReadOnly:
      type: object
      description: "Промокод"
      properties:
        promo_id:
          $ref: "#/components/schemas/PromoId"

        company_id:
          $ref: "#/components/schemas/CompanyId"

        company_name:
          $ref: "#/components/schemas/CompanyName"

        like_count:
          readOnly: true
          type: integer
          description: Количество лайков у промокода.
          minimum: 0
          example: 20

        used_count:
          readOnly: true
          type: integer
          description: Сколько раз пользователи активировали данный промокод.
          minimum: 0
          example: 7

        active:
          $ref: "#/components/schemas/PromoIsActive"

      allOf:
        - $ref: "#/components/schemas/PromoCreate"
      required:
        - promo_id
        - company_id
        - company_name
        - like_count
        - used_count
        - active

    PromoStat:
      type: object
      description: "Статистика промокода"
      properties:
        activations_count:
          type: integer
          minimum: 0
          example: 10
          readOnly: true
          description: "Общее количество активаций"
        countries:
          type: array
          items:
            type: object
            readOnly: true
            properties:
              country:
                $ref: "#/components/schemas/Country"
              activations_count:
                type: integer
                minimum: 1
                description: Количество активаций в этой стране.
            required:
              - country
              - activations_count
      required:
        - activations_count

    UserTargetSettings:
      type: object
      description: "Таргет настройки пользователя"
      properties:
        age:
          type: integer
          minimum: 0
          maximum: 100
          description: Возраст пользователя
          example: 13

        country:
          $ref: "#/components/schemas/Country"

      required:
        - age
        - country

    UserFirstName:
      type: string
      minLength: 1
      maxLength: 100
      example: Мария

    UserSurname:
      type: string
      minLength: 1
      maxLength: 120
      example: Федотова

    UserAvatarURL:
      description: Ссылка на фото пользователя
      type: string
      format: url
      maxLength: 350
      example: https://cdn2.thecatapi.com/images/3lo.jpg

    User:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/UserFirstName"

        surname:
          $ref: "#/components/schemas/UserSurname"

        email:
          $ref: "#/components/schemas/Email"

        avatar_url:
          $ref: "#/components/schemas/UserAvatarURL"

        other:
          $ref: "#/components/schemas/UserTargetSettings"

      required:
        - name
        - surname
        - email
        - other
        
    UserRegister:
      type: object
      properties:
        password:
          $ref: "#/components/schemas/Password"
      
      allOf:
        - $ref: "#/components/schemas/User"
      
      required:
        - password

    UserPatch:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/UserFirstName"

        surname:
          $ref: "#/components/schemas/UserSurname"

        avatar_url:
          $ref: "#/components/schemas/UserAvatarURL"

        password:
          $ref: "#/components/schemas/Password"

    CommentText:
      type: string
      minLength: 10
      maxLength: 1000
      description: Текст комментария
      example: Отличное предложение, все работает

    Comment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CommentId"

        text:
          $ref: "#/components/schemas/CommentText"

        date:
          type: string
          format: date-time
          description: Дата и время создания комментария. Часовой пояс может быть любым, необходимо отразить его в формате RFC3339 (с суффиксом Zhh:mm, вместо Z может быть + или -).
          example: 2025-01-02T15:04:05Z07:00
        author:
          type: object
          properties:
            name:
              $ref: "#/components/schemas/UserFirstName"
            surname:
              $ref: "#/components/schemas/UserSurname"
            avatar_url:
              $ref: "#/components/schemas/UserAvatarURL"
          required:
            - name
            - surname
      required:
        - id
        - text
        - date
        - author

    CompanyId:
      readOnly: true
      type: string
      format: uuid
      description: Уникальный идентификатор компании.
      example: da3ad08d-9b86-41ff-ad70-a30a64d3d170

    CompanyNameCreate:
      type: string
      description: Имя компании.
      minLength: 5
      maxLength: 50
      example: "Шахов production"

    CompanyName:
      allOf:
        - $ref: "#/components/schemas/CompanyNameCreate"
      readOnly: true

    PromoIsActive:
      readOnly: true
      type: boolean
      default: true
      description: Активен ли текущий промокод. Этот параметр определяет сервер.
        Промокод считается активным (и возможным для активации пользователями), если

        1) Текущая дата входит в указанный промежуток [active_from; active_until] (при наличии).

        2) Для mode = COMMON число активаций меньше max_count.

        3) Для mode = UNIQUE остались неактивированные значения.

  headers:
    XTotalCount:
      schema:
        type: integer
        example: 37
      description: Суммарное число объектов. Сервер должен передавать данный заголовок в ответах на запросы с пагинацией, чтобы клиент знал, сколько объектов существует.

  responses:
    Response400:
      description: Ошибка в данных запроса. Например, несоответствие ожидаемому формату или не несоблюдение ограничений (на длину, на допустимые символы, ...).
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Ошибка в данных запроса."
    SignIn200:
      description: Успешная аутентификация.
      content:
        application/json:
          schema:
            type: object
            properties:
              token:
                type: string
                maxLength: 300
                description: Токен доступа для авторизованных запросов. После успешной аутентификации СТАРЫЕ ТОКЕНЫ ПЕРЕСТАЮТ РАБОТАТЬ.
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlByb2QgUHJvZG92aWNoIiwiaWF0IjoxNTE2MjM5MDIyfQ.zqNHgTZOlgb0n5KDT2kPET4dOKnkrxJP5Kz6LhIGRiY"
    SignIn401:
      description: Неверный email или пароль.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Неверный email или пароль."
    NoAuth401:
      description: Пользователь не авторизован.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Пользователь не авторизован."
    NoAccessToPromo:
      description: Промокод не принадлежит этой компании
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Промокод не принадлежит этой компании."
    NoAccessToComment:
      description: Комментарий не принадлежит пользователю
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Комментарий не принадлежит пользователю."
    PromoNotFound:
      description: Промокод не найден.
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Промокод не найден."
    EmailAlreadyRegistred:
      description: Такой email уже зарегистрирован в системе
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Такой email уже зарегистрирован."
    PromoOrCommentNotFound:
      description: Такого промокода или комментария не существует
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Такого промокода или комментария не существует."
